# shellcheck shell=bash
#compdef curl

# based on curl 7.24.0

# shellcheck disable=SC2168
local curcontext="$curcontext" state line
typeset -A opt_args

_curl_crypto_engine() {
    local vals
    # shellcheck disable=SC2298
    # shellcheck disable=SC2296
    vals=( ${${(f)"$(curl --engine list)":gs/ /}[2,$]} )
    _describe -t outputs 'engines' vals && return 0
}

_curl_post_data() {

    # don't do anything further if this is raw content
    compset -P '=' && _message 'raw content' && return 0

    # complete filename or stdin for @ syntax
    compset -P '*@' && {
        local expl
        _description files expl stdin
        # shellcheck disable=SC1087
        compadd "$expl[@]" - "-"
        _files
        return 0
    }

    # got a name already? expecting data.
    compset -P '*=' && _message 'data value' && return 0

    # otherwise, name (or @ or =) should be specified
    _message 'data name' && return 0

}

_curl_headers() {
    # Handle header value completion for common headers
    if compset -P '*:'; then
        # We have "Header:", now complete the value
        # shellcheck disable=SC2299
        local header_name="${${IPREFIX##*-H}##*--header}"
        # shellcheck disable=SC2299
        header_name="${${header_name#[[:space:]]##}%%:*}"
        header_name="${header_name#[\"\']}"
        
        case ${header_name:l} in
            (content-type)
                local content_types=(
                    'application/json:JSON data'
                    'application/xml:XML data'
                    'application/x-www-form-urlencoded:Form data'
                    'application/octet-stream:Binary data'
                    'multipart/form-data:Multipart form'
                    'text/html:HTML document'
                    'text/plain:Plain text'
                    'text/css:CSS stylesheet'
                    'text/javascript:JavaScript'
                    'text/xml:XML text'
                    'image/png:PNG image'
                    'image/jpeg:JPEG image'
                    'image/gif:GIF image'
                    'image/svg+xml:SVG image'
                    'image/webp:WebP image'
                )
                _describe -t content-types 'content type' content_types && return 0
                ;;
            (accept)
                local accept_types=(
                    'application/json:Accept JSON'
                    'application/xml:Accept XML'
                    'text/html:Accept HTML'
                    'text/plain:Accept plain text'
                    '*/*:Accept any type'
                    'application/*:Accept any application type'
                )
                _describe -t accept-types 'accept type' accept_types && return 0
                ;;
            (accept-encoding)
                local encodings=(
                    'gzip:Gzip compression'
                    'deflate:Deflate compression'
                    'br:Brotli compression'
                    'compress:Compress algorithm'
                    'identity:No compression'
                    'gzip, deflate, br:Common combination'
                )
                _describe -t encodings 'encoding' encodings && return 0
                ;;
            (accept-language)
                local languages=(
                    'en-US:English (US)'
                    'en:English'
                    'en-GB:English (UK)'
                    'es:Spanish'
                    'fr:French'
                    'de:German'
                    'it:Italian'
                    'ja:Japanese'
                    'zh-CN:Chinese (Simplified)'
                    'pt-BR:Portuguese (Brazil)'
                )
                _describe -t languages 'language' languages && return 0
                ;;
            (authorization)
                local auth_types=(
                    'Bearer:Bearer token'
                    'Basic:Basic auth'
                    'Digest:Digest auth'
                    'OAuth:OAuth token'
                )
                _describe -t auth-types 'authorization type' auth_types && return 0
                ;;
            (cache-control)
                local cache_directives=(
                    'no-cache:No caching'
                    'no-store:No storage'
                    'max-age=0:No age'
                    'max-age=3600:Cache for 1 hour'
                    'public:Public cache'
                    'private:Private cache'
                    'must-revalidate:Must revalidate'
                )
                _describe -t cache-directives 'cache directive' cache_directives && return 0
                ;;
            (connection)
                local connection_types=(
                    'keep-alive:Keep connection alive'
                    'close:Close connection'
                )
                _describe -t connection-types 'connection type' connection_types && return 0
                ;;
            (user-agent)
                local user_agents=(
                    'Mozilla/5.0:Mozilla/5.0'
                    'curl/7.64.1:curl default'
                )
                _describe -t user-agents 'user agent' user_agents && return 0
                ;;
        esac
        
        # Default: just show a message for the value
        _message 'header value' && return 0
    else
        # Complete header names
        local headers=(
            'Accept:Content types client can process'
            'Accept-Encoding:Encoding types client supports'
            'Accept-Language:Languages client prefers'
            'Authorization:Authentication credentials'
            'Cache-Control:Caching directives'
            'Connection:Connection options'
            'Content-Encoding:Encoding of the body'
            'Content-Length:Length of request body'
            'Content-Type:Media type of body'
            'Cookie:HTTP cookies'
            'Date:Message origination date/time'
            'ETag:Entity tag identifier'
            'Expect:Expected behavior from server'
            'Host:Domain name of server'
            'If-Match:Match resource entity tag'
            'If-Modified-Since:Return only if modified'
            'If-None-Match:Match entity tag'
            'If-Range:Range request condition'
            'If-Unmodified-Since:Return only if unmodified'
            'Last-Modified:Last modification date'
            'Location:Redirect location'
            'Origin:Request origin'
            'Pragma:Implementation-specific directives'
            'Range:Request part of resource'
            'Referer:Previous page address'
            'Server:Server software'
            'User-Agent:User agent string'
            'Vary:Response vary headers'
            'X-Requested-With:Identify Ajax requests'
            'X-Forwarded-For:Client IP address'
            'X-Forwarded-Host:Original host header'
            'X-Forwarded-Proto:Original protocol'
            'X-CSRF-Token:CSRF protection token'
            'X-API-Key:API authentication key'
        )
        _describe -t headers 'HTTP header' headers -S ':' && return 0
    fi
}

local arg_http arg_ftp arg_other arg_proxy arg_crypto arg_connection arg_auth arg_input arg_output

# HTTP Arguments
arg_http=(''\
  {-0,--http1.0}'[force use of use http 1.0 instead of 1.1]' \
  {-b,--cookie}'[pass data to http server as cookie]:data or file' \
  {-c,--cookie-jar}'[specify cookie file]:file name:_files' \
  {-d,--data}'[send specified data as HTTP POST data]:data:{_curl_post_data}' \
  '--data-binary[post HTTP POST data without any processing]:data:{_curl_post_data}' \
  '--data-urlencode[post HTTP POST data, with url encoding]:data:{_curl_post_data}' \
  {-f,--fail}'[enable failfast behavior for server errors]' \
  '*'{-F,--form}'[add POST form data]:name=content' \
  {-G,--get}'[use HTTP GET even with data (-d, --data, --data-binary)]' \
  '*'{-H,--header}'[specify an extra header]:header:{_curl_headers}' \
  '--ignore-content-length[ignore Content-Length header]' \
  {-i,--include}'[include HTTP header in the output]' \
  {-j,--junk-session-cookies}'[discard all session cookies]' \
  {-e,--referer}'[send url as referer]:referer url:_urls' \
  {-L,--location}'[follow Location headers on http 3XX response]' \
  '--location-trusted[like --location, but allows sending of auth data to redirected hosts]' \
  '--max-redirs[set maximum number of redirection followings allowed]:number' \
  {-J,--remote-header-name}'[use Content-Disposition for output file name]' \
  {-O,--remote-name}'[write to filename parsed from url instead of stdout]' \
  '--post301[do not convert POST to GET after following 301 Location response (follow RFC 2616/10.3.2)]' \
  '--post302[do not convert POST to GET after following 302 Location response (follow RFC 2616/10.3.2)]' \
  )

# FTP arguments
arg_ftp=(\
  {-a,--append}'[append to target file instead of overwriting (FTP/SFTP)]' \
  '--crlf[convert LF to CRLF in upload]' \
  '--disable-eprt[disable use of EPRT and LPRT for active FTP transfers]' \
  '--disable-epsv[disable use of EPSV for passive FTP transfers]' \
  '--ftp-account[account data (FTP)]:data' \
  '--ftp-alternative-to-user[command to send when USER and PASS commands fail (FTP)]:command' \
  '--ftp-create-dirs[create paths remotely if it does not exist]' \
  '--ftp-method[ftp method to use to reach a file (FTP)]:method:(multicwd ocwd singlecwd)' \
  '--ftp-pasv[use passive mode for the data connection (FTP)]' \
  '--ftp-skip-pasv-ip[do not use the ip the server suggests for PASV]' \
  '--form-string[like --form, but do not parse content]:name=string' \
  '--ftp-pret[send PRET before PASV]' \
  '--ftp-ssl-ccc[use clear command channel (CCC) after authentication (FTP)]' \
  '--ftp-ssl-ccc-mode[sets the CCC mode (FTP)]:mode:(active passive)' \
  '--ftp-ssl-control[require SSL/TLS for FTP login, clear for transfer]' \
  {-l,--list-only}'[list names only when listing directories (FTP)]' \
  {-P,--ftp-port}'[use active mode, tell server to connect to specified address or interface (FTP]:address' \
  '*'{-Q,--quote}'[send arbitrary command to the remote server before transfer (FTP/SFTP)]:command' \
  )

# Other Protocol arguments
arg_other=(\
  '--mail-from[specify From: address]:address' \
  '--mail-rcpt[specify email recipient for SMTP, may be given multiple times]:address' \
  {-t,--telnet-option}'[pass options to telnet protocol]:opt=val' \
  '--tftp-blksize[set tftp BLKSIZE option]:value' \
  )

# Proxy arguments
arg_proxy=(\
  '--noproxy[list of hosts to connect directly to instead of through proxy]:no-proxy-list' \
  {-p,--proxytunnel}'[tunnel non-http protocols through http proxy]' \
  {-U,--proxy-user}'[specify the user name and password to use for proxy authentication]:user:password' \
  '--proxy-anyauth[use any authentication method for proxy, default to most secure]' \
  '--proxy-basic[use HTTP Basic authentication for proxy]' \
  '--proxy-digest[use http digest authentication for proxy]' \
  '--proxy-negotiate[enable GSS-Negotiate authentication for proxy]' \
  '--proxy-ntlm[enable ntlm authentication for proxy]' \
  '--proxy1.0[use http 1.0 proxy]:proxy url' \
  {-x,--proxy}'[use specified proxy]:proxy url' \
  '--socks5-gssapi-service[change service name for socks server]:servicename' \
  '--socks5-gssapi-nec[allow unprotected exchange of protection mode negotiation]' \
  )

# Crypto arguments
arg_crypto=(\
  {-1,--tlsv1}'[Forces curl to use TLS version 1 when negotiating with a remote TLS server.]' \
  {-2,--sslv2}'[Forces curl to use SSL version 2 when negotiating with a remote SSL server.]' \
  {-3,--sslv3}'[Forces curl to use SSL version 3 when negotiating with a remote SSL server.]' \
  '--ciphers[specifies which cipher to use for the ssl connection]:list of ciphers' \
  '--crlfile[specify file with revoked certificates]:file' \
  '--delegation[set delegation policy to use with GSS/kerberos]:delegation policy:(none policy always)' \
  {-E,--cert}'[use specified client certificate]:certificate file:_files' \
  '--engine[use selected OpenSSL crypto engine]:ssl crypto engine:{_curl_crypto_engine}' \
  '--egd-file[set ssl entropy gathering daemon socket]:entropy socket:_files' \
  '--cert-type[specify certificate type (PEM, DER, ENG)]:certificate type:(PEM DER ENG)' \
  '--cacert[specify certificate file to verify the peer with]:CA certificate:_files' \
  '--capath[specify a search path for certificate files]:CA certificate directory:_directories' \
  '--hostpubmd5[check remote hosts public key]:md5 hash' \
  {-k,--insecure}'[allow ssl to perform insecure ssl connections (ie, ignore certificate)]' \
  '--key[ssl/ssh private key file name]:key file:_files' \
  '--key-type[ssl/ssh private key file type]:file type:(PEM DER ENG)' \
  '--pubkey[ssh public key file]:pubkey file:_files' \
  '--random-file[set source of random data for ssl]:random source:_files' \
  '--no-sessionid[disable caching of ssl session ids]' \
  '--pass:phrase[passphrase for ssl/ssh private key]' \
  '--ssl[try to use ssl/tls for connection, if available]' \
  '--ssl-reqd[try to use ssl/tls for connection, fail if unavailable]' \
  '--tlsauthtype[set TLS authentication type (only SRP supported!)]:authtype' \
  '--tlsuser[set username for TLS authentication]:user' \
  '--tlspassword[set password for TLS authentication]:password' \
  )

# Connection arguments
arg_connection=(\
  {-4,--ipv4}'[prefer ipv4]' \
  {-6,--ipv6}'[prefer ipv6, if available]' \
  {-B,--use-ascii}'[use ascii mode]' \
  '--compressed[request a compressed transfer]' \
  '--connect-timeout[timeout for connection phase]:seconds' \
  {-I,--head}'[fetch http HEAD only (HTTP/FTP/FILE]' \
  '--interface[work on a specific interface]:name' \
  '--keepalive-time[set time to wait before sending keepalive probes]:seconds' \
  '--limit-rate[specify maximum transfer rate]:speed' \
  '--local-port[set preferred number or range of local ports to use]:num' \
  {-N,--no-buffer}'[disable buffering of the output stream]' \
  '--no-keepalive[disable use of keepalive messages in TCP connections]' \
  '--raw[disable all http decoding and pass raw data]' \
  '--resolve[provide a custom address for a specific host and port pair]:host\:port\:address' \
  '--retry[specify maximum number of retries for transient errors]:num' \
  '--retry-delay[specify delay between retries]:seconds' \
  '--retry-max-time[maximum time to spend on retries]:seconds' \
  '--tcp-nodelay[turn on TCP_NODELAY option]' \
  {-y,--speed-time}'[specify time to abort after if download is slower than speed-limit]:time' \
  {-Y,--speed-limit}'[specify minimum speed for --speed-time]:speed' \
  )

# Authentication arguments
arg_auth=(\
  '--anyauth[use any authentication method, default to most secure]' \
  '--basic[use HTTP Basic authentication]' \
  '--ntlm[enable ntlm authentication]' \
  '--digest[use http digest authentication]' \
  '--krb[use kerberos authentication]:auth:(clear safe confidential private)' \
  '--negotiate[enable GSS-Negotiate authentication]' \
  {-n,--netrc}'[scan ~/.netrc for login data]' \
  '--netrc-optional[like --netrc, but does not make .netrc usage mandatory]' \
  '--netrc-file[like --netrc, but specify file to use]:netrc file:_files' \
  '--tr-encoding[request compressed transfer-encoding]' \
  {-u,--user}'[specify user name and password for server authentication]:user\:password' \
  )

# Input arguments
arg_input=(\
  {-C,--continue-at}'[resume at offset ]:offset' \
  {-g,--globoff}'[do not glob {}\[\] letters]' \
  '--max-filesize[maximum filesize to download, fail for bigger files]:bytes' \
  '--proto[specify allowed protocols for transfer]:protocols' \
  '--proto-redir[specify allowed protocols for transfer after a redirect]:protocols' \
  {-r,--range}'[set range of bytes to request (HTTP/FTP/SFTP/FILE)]:range' \
  {-R,--remote-time}'[use timestamp of remote file for local file]' \
  {-T,--upload-file}'[transfer file to remote url (using PUT for HTTP)]:file to upload:_files' \
  '--url[specify a URL to fetch (multi)]:url:_urls' \
  {-z,--time-cond}'[request downloaded file to be newer than date or given reference file]:date expression' \
  )

# Output arguments
arg_output=(\
  '--create-dirs[create local directory hierarchy as needed]' \
  {-D,--dump-header}'[write protocol headers to file]:dump file:_files' \
  {-o,--output}'[write to specified file instead of stdout]:output file:_files' \
  {--progress-bar,-\#}'[display progress as a simple progress bar]' \
  {-\#,--progress-bar}'[Make curl display progress as a simple progress bar instead of the standard, more informational, meter.]' \
  {-R,--remote-time}'[use timestamp of remote file for local file]' \
  '--raw[disable all http decoding and pass raw data]' \
  {-s,--silent}'[silent mode, do not show progress meter or error messages]' \
  {-S,--show-error}'[show errors in silent mode]' \
  '--stderr[redirect stderr to specified file]:output file:_files' \
  '--trace[enable full trace dump of all incoming and outgoing data]:trace file:_files' \
  '--trace-ascii[enable full trace dump of all incoming and outgoing data, without hex data]:trace file:_files' \
  '--trace-time[prepends a time stamp to each trace or verbose line that curl displays]' \
  {-v,--verbose}'[output debug info]' \
  {-w,--write-out}'[specify message to output on successful operation]:format string' \
  '--xattr[store some file metadata in extended file attributes]' \
  {-X,--request}'[specifies request method for HTTP server]:method:(GET POST PUT DELETE HEAD OPTIONS TRACE CONNECT PATCH LINK UNLINK)' \
  )

_arguments -C -s $arg_http $arg_ftp $arg_other $arg_crypto $arg_connection $arg_auth $arg_input $arg_output \
  {-h,--help}'[print usage]' \
  {-M,--manual}'[print manual]' \
  '*'{-K,--config}'[use other config file to read arguments from]:config file:_files' \
  '--libcurl[output libcurl code for the operation to file]:output file:_files' \
  {-m,--max-time}'[limit total time of operation]:seconds' \
  {-s,--silent}'[silent mode, do not show progress meter or error messages]' \
  {-S,--show-error}'[show errors in silent mode]' \
  '--stderr[redirect stderr to specified file]:output file:_files' \
  '-q[do not read settings from .curlrc (must be first option)]' \
  {-V,--version}'[displays information about curl and the libcurl version it uses]' \
  '*:URL:_urls' && return 0